// <auto-generated />
using System;
using Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(EFCoreDbContext))]
    [Migration("20240913194702_Initial-Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("Chk_Phone_Mail", "Mail IS NOT NULL OR Phone IS NOT NULL");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Begin")
                        .HasColumnType("DateTime");

                    b.Property<string>("Dish_Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");

                    b.HasDiscriminator<string>("Dish_Discriminator").HasValue("Dish");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.DishIngredient", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DishId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishIngredient");
                });

            modelBuilder.Entity("Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DinersQty")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It h",
                            Name = "Italian",
                            Theme = "Italian Menu",
                            WaiterId = 8
                        },
                        new
                        {
                            Id = 8,
                            Description = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content her",
                            Name = "Caribean",
                            Theme = "Caribean Food",
                            WaiterId = 12
                        });
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1003,
                            EndTime = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "First",
                            StartTime = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1004,
                            EndTime = new DateTime(2024, 1, 1, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Second",
                            StartTime = new DateTime(2024, 1, 1, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1005,
                            EndTime = new DateTime(2024, 1, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Third",
                            StartTime = new DateTime(2024, 1, 1, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1008,
                            EndTime = new DateTime(2024, 1, 1, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fourth",
                            StartTime = new DateTime(2024, 1, 1, 14, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1009,
                            EndTime = new DateTime(2024, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fifth",
                            StartTime = new DateTime(2024, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1010,
                            EndTime = new DateTime(2024, 1, 1, 21, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sixth",
                            StartTime = new DateTime(2024, 1, 1, 19, 15, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("TotalQty")
                        .HasColumnType("int");

                    b.Property<int?>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "Id");

                    b.HasIndex("WaiterId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Domain.Entities.TableDish", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("OrderQty")
                        .HasColumnType("int");

                    b.Property<int>("TableRoomId")
                        .HasColumnType("int");

                    b.HasKey("TableId", "RoomId", "ShiftId", "DishId", "Date");

                    b.HasIndex("DishId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TableRoomId", "TableId");

                    b.ToTable("TableDishes");
                });

            modelBuilder.Entity("Domain.Entities.Waiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            FirstName = "John",
                            LastName = "Doe",
                            Salary = 3000.00m,
                            ShiftId = 1003
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Jane",
                            LastName = "Doe",
                            Salary = 5000.00m,
                            ShiftId = 1004
                        },
                        new
                        {
                            Id = 13,
                            FirstName = "Smith",
                            LastName = "Johnson",
                            Salary = 6000.00m,
                            ShiftId = 1005
                        });
                });

            modelBuilder.Entity("Reservation_Table", b =>
                {
                    b.Property<int>("room_id")
                        .HasColumnType("int");

                    b.Property<int>("table_id")
                        .HasColumnType("int");

                    b.Property<int>("reservation_id")
                        .HasColumnType("int");

                    b.HasKey("room_id", "table_id", "reservation_id");

                    b.HasIndex("reservation_id");

                    b.ToTable("Reservation_Table");
                });

            modelBuilder.Entity("Domain.Entities.Dessert", b =>
                {
                    b.HasBaseType("Domain.Entities.Dish");

                    b.Property<decimal>("QualityReview")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("SugarQty")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Dessert");
                });

            modelBuilder.Entity("Domain.Entities.MainCourse", b =>
                {
                    b.HasBaseType("Domain.Entities.Dish");

                    b.Property<int>("ProteinQty")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MainCourse");
                });

            modelBuilder.Entity("Domain.Entities.DishIngredient", b =>
                {
                    b.HasOne("Domain.Entities.Dish", "Dish")
                        .WithMany("DishIngredient")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("DishIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shift", "Shift")
                        .WithMany("Reservations")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithMany("Reservations")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Shift");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithOne("Room")
                        .HasForeignKey("Domain.Entities.Room", "WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Tables")
                        .HasForeignKey("RoomId");

                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithMany("Tables")
                        .HasForeignKey("WaiterId");

                    b.Navigation("Room");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Domain.Entities.TableDish", b =>
                {
                    b.HasOne("Domain.Entities.Dish", "Dish")
                        .WithMany("TablesDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shift", "Shift")
                        .WithMany("TableDishs")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Table", "Table")
                        .WithMany("TablesDishes")
                        .HasForeignKey("TableRoomId", "TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Shift");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Entities.Waiter", b =>
                {
                    b.HasOne("Domain.Entities.Shift", "Shift")
                        .WithMany("Waiters")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Reservation_Table", b =>
                {
                    b.HasOne("Domain.Entities.Reservation", null)
                        .WithMany()
                        .HasForeignKey("reservation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("room_id", "table_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.Navigation("DishIngredient");

                    b.Navigation("TablesDishes");
                });

            modelBuilder.Entity("Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("DishIngredient");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("TableDishs");

                    b.Navigation("Waiters");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Navigation("TablesDishes");
                });

            modelBuilder.Entity("Domain.Entities.Waiter", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Room");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
