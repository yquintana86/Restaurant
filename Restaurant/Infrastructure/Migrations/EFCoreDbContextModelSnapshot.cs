// <auto-generated />
using System;
using Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(EFCoreDbContext))]
    partial class EFCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("Chk_Phone_Mail", "Mail IS NOT NULL OR Phone IS NOT NULL");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dish_Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime?>("FirstServed")
                        .HasColumnType("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id");

                    b.ToTable("Dishes");

                    b.HasDiscriminator<string>("Dish_Discriminator").HasValue("Dish");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.DishIngredient", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DishId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishIngredient");
                });

            modelBuilder.Entity("Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DinersQty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It h",
                            Name = "Italian",
                            Theme = "Italian Menu",
                            WaiterId = 8
                        },
                        new
                        {
                            Id = 8,
                            Description = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content her",
                            Name = "Caribean",
                            Theme = "Caribean Food",
                            WaiterId = 12
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoomTable", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("TotalQty")
                        .HasColumnType("int");

                    b.Property<int?>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "Id");

                    b.HasIndex("WaiterId");

                    b.ToTable("RoomTables");

                    b.HasData(
                        new
                        {
                            RoomId = 7,
                            Id = 2,
                            Status = "Reserved",
                            TotalQty = 2,
                            WaiterId = 8
                        },
                        new
                        {
                            RoomId = 7,
                            Id = 3,
                            Status = "Busy",
                            TotalQty = 2,
                            WaiterId = 12
                        },
                        new
                        {
                            RoomId = 8,
                            Id = 4,
                            Status = "Unreserved",
                            TotalQty = 2,
                            WaiterId = 8
                        },
                        new
                        {
                            RoomId = 8,
                            Id = 5,
                            Status = "Reserved",
                            TotalQty = 4,
                            WaiterId = 13
                        },
                        new
                        {
                            RoomId = 8,
                            Id = 6,
                            Status = "Unreserved",
                            TotalQty = 6,
                            WaiterId = 13
                        });
                });

            modelBuilder.Entity("Domain.Entities.TableDish", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("TableRoomId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("OrderedQty")
                        .HasColumnType("int");

                    b.HasKey("TableId", "TableRoomId", "ReservationId", "DishId");

                    b.HasIndex("DishId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TableRoomId", "TableId");

                    b.ToTable("TableDishes");
                });

            modelBuilder.Entity("Domain.Entities.Waiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("Start")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 10, 1, 17, 52, 35, 458, DateTimeKind.Local).AddTicks(8577));

                    b.HasKey("Id");

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            FirstName = "John",
                            LastName = "Doe",
                            Salary = 3000.00m,
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Jane",
                            LastName = "Doe",
                            Salary = 5000.00m,
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            FirstName = "Smith",
                            LastName = "Johnson",
                            Salary = 6000.00m,
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.WorkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaiterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId");

                    b.ToTable("WorkHistory");
                });

            modelBuilder.Entity("ReservationRoomTable", b =>
                {
                    b.Property<int>("ReservationsId")
                        .HasColumnType("int");

                    b.Property<int>("TablesRoomId")
                        .HasColumnType("int");

                    b.Property<int>("TablesId")
                        .HasColumnType("int");

                    b.HasKey("ReservationsId", "TablesRoomId", "TablesId");

                    b.HasIndex("TablesRoomId", "TablesId");

                    b.ToTable("ReservationRoomTable");
                });

            modelBuilder.Entity("Domain.Entities.Dessert", b =>
                {
                    b.HasBaseType("Domain.Entities.Dish");

                    b.Property<decimal>("QualityReview")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("SugarQty")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Dessert");
                });

            modelBuilder.Entity("Domain.Entities.MainCourse", b =>
                {
                    b.HasBaseType("Domain.Entities.Dish");

                    b.Property<int>("ProteinQty")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MainCourse");
                });

            modelBuilder.Entity("Domain.Entities.DishIngredient", b =>
                {
                    b.HasOne("Domain.Entities.Dish", "Dish")
                        .WithMany("DishIngredient")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("DishIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithMany("Reservations")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithOne("Room")
                        .HasForeignKey("Domain.Entities.Room", "WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Domain.Entities.RoomTable", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Tables")
                        .HasForeignKey("RoomId");

                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithMany("RoomTables")
                        .HasForeignKey("WaiterId");

                    b.Navigation("Room");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Domain.Entities.TableDish", b =>
                {
                    b.HasOne("Domain.Entities.Dish", "Dish")
                        .WithMany("TablesDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("TableDishes")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoomTable", "Table")
                        .WithMany("TablesDishes")
                        .HasForeignKey("TableRoomId", "TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Entities.WorkHistory", b =>
                {
                    b.HasOne("Domain.Entities.Waiter", "Waiter")
                        .WithMany("WorkHistories")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("ReservationRoomTable", b =>
                {
                    b.HasOne("Domain.Entities.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoomTable", null)
                        .WithMany()
                        .HasForeignKey("TablesRoomId", "TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.Navigation("DishIngredient");

                    b.Navigation("TablesDishes");
                });

            modelBuilder.Entity("Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("DishIngredient");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Navigation("TableDishes");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Domain.Entities.RoomTable", b =>
                {
                    b.Navigation("TablesDishes");
                });

            modelBuilder.Entity("Domain.Entities.Waiter", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Room");

                    b.Navigation("RoomTables");

                    b.Navigation("WorkHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
